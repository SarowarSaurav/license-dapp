{"version":3,"sources":["images/icon.png","images/gorgeous-line-top.png","images/gorgeous-line-bottom.png","images/certification-stamp.png","images/facebook-icon.svg","images/twitter-icon.svg","images/mail-icon.svg","utils/hex.js","components/Home.js","utils/getWeb3.js","utils/getContractInstance.js","components/Certification.js","utils/sendTransaction.js","components/IssuePage.js","components/App.js","index.js"],"names":["module","exports","toHex","str","s","unescape","encodeURIComponent","h","i","length","charCodeAt","toString","fromHex","String","fromCharCode","parseInt","substr","decodeURIComponent","escape","Home","state","bride","groom","handleChange","e","setState","target","name","value","validation","this","canIssue","className","src","IconImg","alt","width","height","type","placeholder","required","onChange","to","Component","getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","getContractInstance","contractDefinition","eth","net","getId","networkId","deployedAddress","networks","address","instance","Contract","abi","Certification","cerID","txHash","issuedDate","Date","toLocaleDateString","componentDidMount","params","props","match","isSample","getAccounts","accounts","contract","id","decodeCertificationID","methods","certifications","call","from","certification","getTransactionReceipt","receipt","getBlock","blockNumber","block","replace","timestamp","alert","message","error","path","LineTopImg","CerImg","LineBottomImg","FacebookImg","TwitterImg","MailImg","hex","Number","sendTransaction","transaction","estimateGas","gas","options","data","encodeABI","gasPrice","send","blockHash","IssuePage","issuing","issued","handleClick","location","href","padTo32byte","FEE","fee","issueCertification","events","Issued","returnValues","certificationId","transactionHash","readOnly","disabled","role","aria-hidden","onClick","padStart","App","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1757155.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.57c400b8.png\";","module.exports = __webpack_public_path__ + \"static/media/gorgeous-line-top.ff1db429.png\";","module.exports = __webpack_public_path__ + \"static/media/gorgeous-line-bottom.d1162595.png\";","module.exports = __webpack_public_path__ + \"static/media/certification-stamp.dd99316c.png\";","module.exports = __webpack_public_path__ + \"static/media/facebook-icon.1102b5b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter-icon.a1223de5.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail-icon.46bb5905.svg\";","// Ref: https://gist.github.com/valentinkostadinov/5875467\nconst toHex = (str) => {\n    // utf8 to latin1\n    var s = unescape(encodeURIComponent(str))\n    var h = ''\n    for (var i = 0; i < s.length; i++) {\n        h += s.charCodeAt(i).toString(16)\n    }\n    return h\n}\n\nconst fromHex = (h) => {\n    var s = ''\n    for (var i = 0; i < h.length; i+=2) {\n        s += String.fromCharCode(parseInt(h.substr(i, 2), 16))\n    }\n\n    return decodeURIComponent(escape(s))\n}\n\nexport { toHex, fromHex }\n","import React, { Component } from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { toHex } from \"../utils/hex\"\n\nimport IconImg from \"../images/icon.png\"\n\nclass Home extends Component {\n  state = {\n    bride: '',\n    groom: '',\n  }\n\n  handleChange = (e) => this.setState({[e.target.name]: toHex(e.target.value)})\n\n  validation = (value) => 1 <= value.length && value.length <= 64\n\n  render() {\n    let bride = this.state.bride\n    let groom = this.state.groom\n    let canIssue = this.validation(bride) && this.validation(groom)\n\n    return (\n      <div className=\"container ribbon14-wrapper\">\n        <span className=\"ribbon14\">♡</span>\n        <div className=\"py-5 text-center\">\n          <img className=\"d-block mx-auto mb-4\" src={IconImg} alt=\"\" width=\"72\" height=\"72\"/>\n          <h1 className=\"text-white\">Marriage certification on Blockchain</h1>\n          <p className=\"lead text-white\">Blockchain prove your marriage forever even you go. Issue marriage certification for everybody even sexual minorities.</p>\n        </div>\n        <form className=\"form-signin\">\n          <div className=\"text-center mb-4\">\n            <p className=\"lead text-white\">Please tell us <code className=\"p-1 bg-light\">your name</code> and <br/><code className=\"p-1 bg-light\">your partner's name</code>. We are going to show you a sample certification.</p>\n          </div>\n\n          <div className=\"form-label-group mb-2\">\n            <input type=\"text\" name=\"bride\" placeholder=\"Your Name\" required\n              onChange={(e) => this.handleChange(e)} \n              className={this.validation(bride) || bride === '' ? \"form-control\" : \"is-invalid form-control\"}/>\n            <div className=\"invalid-feedback text-white\">Too Long</div>\n          </div>\n\n          <div className=\"form-label-group mb-4\">\n            <input type=\"text\" name=\"groom\" placeholder=\"Partner's Name\" required\n              onChange={(e) => this.handleChange(e)} \n              className={this.validation(groom) || groom === '' ? \"form-control\" : \"is-invalid form-control\"}/>\n            <div className=\"invalid-feedback text-white\">Too Long</div>\n          </div>\n          <Link className={canIssue \n              ? 'btn btn-lg btn-block btn-outline-pink' \n              : 'btn btn-lg btn-block btn-outline-pink disabled'\n            } to={`/certification/sample/${bride}/${groom}`}>Issue Sample Certification</Link>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise(async (resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    // window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    // });\n  });\n\nexport default getWeb3;\n","const getContractInstance = async (web3, contractDefinition) => {\n\n  // get network ID and the deployed address\n  const networkId = await web3.eth.net.getId()\n  const deployedAddress = contractDefinition.networks[networkId].address\n\n  // create the instance\n  const instance = new web3.eth.Contract(contractDefinition.abi, deployedAddress)\n\n  return instance\n}\n\nexport default getContractInstance\n","import React, { Component } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport contractDefinition from \"../contracts/MarriageCertificationIssuer.json\"\nimport getWeb3 from \"../utils/getWeb3\"\nimport getContractInstance from '../utils/getContractInstance'\nimport { redirectRoot } from \"../utils/common\"\nimport { toHex, fromHex } from \"../utils/hex\"\n\nimport LineTopImg from \"../images/gorgeous-line-top.png\"\nimport LineBottomImg from \"../images/gorgeous-line-bottom.png\"\nimport CerImg from \"../images/certification-stamp.png\"\nimport FacebookImg from \"../images/facebook-icon.svg\"\nimport TwitterImg from \"../images/twitter-icon.svg\"\nimport MailImg from \"../images/mail-icon.svg\"\n\nconst PREFIX_NUM = 20000000\n\nclass Certification extends Component {\n  state = {\n    bride: '',\n    groom: '',\n    cerID: '0x00000',\n    txHash: '0x0000000000000000000000000000000000000000',\n    issuedDate: (new Date()).toLocaleDateString('en-US'),\n  }\n\n  componentDidMount = async () => {\n    const params = this.props.match.params\n\n    if (this.isSample()) {\n      this.setState({ bride: fromHex(params.bride), groom: fromHex(params.groom) })\n      return\n    }\n\n    try {\n      const web3 = await getWeb3()\n      const accounts = await web3.eth.getAccounts()\n      const contract = await getContractInstance(web3, contractDefinition)\n\n      const id = decodeCertificationID(params.id)\n      const certification = await contract.methods.certifications(id).call({ from: accounts[0] })\n      const receipt = await web3.eth.getTransactionReceipt(params.txHash)\n      const block = await web3.eth.getBlock(receipt.blockNumber)\n\n      this.setState({ \n        bride: fromHex(certification.bride.replace(/^0x0*/,'')),\n        groom: fromHex(certification.groom.replace(/^0x0*/,'')),\n        cerID: params.id,\n        txHash: params.txHash,\n        issuedDate: (new Date(block.timestamp * 1000)).toLocaleDateString('en-US'),\n      })\n\n    } catch (e) {\n      alert(e.message, console.error(e))\n    }\n  }\n\n  isSample = () => this.props.match.path === '/certification/sample/:bride/:groom/'\n\n  render() {\n    const isSample = this.isSample()\n    return (\n      <div className=\"bg-white\">\n        <div className=\"container py-5\">\n          <div className=\"cross-line text-center my-2 mx-2\">\n            <div className=\"row mt-3\">\n              <div className=\"col\">\n                <img className=\"d-block mx-auto mb-4\" src={LineTopImg} alt=\"\" width=\"300\" height=\"50\"/>\n                { isSample ? <h3>Sample</h3> : ''}\n                <h1 className=\"text-pink\">Certificate of Marriage</h1>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-5\">\n                <p className=\"lead mx-4 border-line\">{this.state.bride}</p>\n              </div>\n              <div className=\"col-md-2\">\n                <p>And</p>\n              </div>\n              <div className=\"col-md-5\">\n                <p className=\"lead mx-4 border-line\">{this.state.groom}</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <p>Were United in Marriage on <code className=\"border-line text-dark\">{this.state.issuedDate}</code><br/>This Certification was Recored in a Smart Contract of Ethereum.</p>\n              </div>\n            </div>\n            <div className=\"row mb-5\">\n              <div className=\"col-md-1\"></div>\n              <div className=\"col-md-8 text-left\">\n                <blockquote className=\"blockquote ml-2\">\n                  <p className=\"mb-0\">Transaction Hash:</p>\n                  <footer className=\"blockquote-footer break-word\">{this.state.txHash}</footer>\n                </blockquote>\n                <blockquote className=\"blockquote ml-2\">\n                  <p className=\"mb-0\">Certification ID:</p>\n                  <footer className=\"blockquote-footer break-word\">{this.state.cerID}</footer>\n                </blockquote>\n              </div>\n              <div className=\"col-md-2\">\n                <img src={CerImg} alt=\"Responsive image\" width=\"130\" height=\"150\"/>\n              </div>\n              <div className=\"col-md-1\"></div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col\">\n                <img className=\"d-block mx-auto mb-4\" src={LineBottomImg} alt=\"\" width=\"270\" height=\"30\"/>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"pink lighten-1\">\n          <div className=\"container\">\n            <div className=\"row text-white\">\n              <div className=\"col\">\n                <p className=\"lead my-1\">Share with your partner</p>\n                <nav className=\"mb-2\">\n                  <img className=\"mr-2\" src={FacebookImg} alt=\"\" width=\"30\" height=\"30\"/>\n                  <img className=\"mr-2\" src={TwitterImg} alt=\"\" width=\"30\" height=\"30\"/>\n                  <img className=\"mr-2\" src={MailImg} alt=\"\" width=\"30\" height=\"30\"/>\n                </nav>\n              </div>\n            </div>\n            { isSample\n              ? <div className=\"row mb-2\">\n                  <div className=\"col\">\n                    <Link className=\"btn btn-lg btn-block btn-outline-pink\" \n                      to={`/issue/${toHex(this.state.bride)}/${toHex(this.state.groom)}`}>Next</Link>\n                  </div>\n                </div>\n              : ''\n             }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst decodeCertificationID = (hex) => Number(fromHex(hex.replace(/^0x/, \"\"))) - PREFIX_NUM - 1\n\nexport default Certification\n","const sendTransaction = async (transaction, from, value=0, web3) => {\n  const gas = await transaction.estimateGas({ from, value })\n\n  console.log(\"Estimaged Gas:\" + gas)\n  console.log(transaction)\n\n  let options = {\n    from,\n    data: transaction.encodeABI(),\n    gas: gas + 10000,\n    gasPrice: 10000000000,\n    value\n  }\n\n  const receipt = await transaction.send(options)\n\n  console.log(receipt)\n\n  if (!receipt.blockHash) throw 'Failed to send transaction'\n\n  return receipt;\n}\n\nexport default sendTransaction\n","import React, { Component } from \"react\"\nimport { redirectRoot } from \"../utils/common\"\n\nimport contractDefinition from \"../contracts/MarriageCertificationIssuer.json\"\nimport getWeb3 from \"../utils/getWeb3\"\nimport getContractInstance from '../utils/getContractInstance'\nimport sendTransaction from '../utils/sendTransaction'\nimport { toHex, fromHex } from \"../utils/hex\"\n\nclass IssuePage extends Component {\n  state = {\n    issuing: false,\n    issued: false,\n    bride: '',\n    groom: '',\n    cerID: '',\n    txHash: '',\n  }\n\n  componentDidMount() {\n    const params = this.props.match.params\n    this.setState({bride: params.bride, groom: params.groom})\n  }\n\n  handleChange = (e) => this.setState({[e.target.name]: toHex(e.target.value)})\n\n  handleClick = async () => {\n    if (this.state.issued) {\n      const s = this.state\n      window.location.href = `/certification/${s.cerID}/${s.txHash}`\n    }\n\n    try {\n      this.setState({issuing: true})\n      const web3 = await getWeb3()\n      const accounts = await web3.eth.getAccounts()\n      const contract = await getContractInstance(web3, contractDefinition)\n\n      const bride = padTo32byte(this.state.bride)\n      const groom = padTo32byte(this.state.groom)\n      const fee = await contract.methods.FEE().call({ from: accounts[0] })\n\n      const transaction = contract.methods.issueCertification(bride, groom)\n      const receipt = await sendTransaction(transaction, accounts[0], fee)\n\n      this.setState({ \n        issued: true, \n        issuing: false, \n        cerID: `0x${toHex(receipt.events.Issued.returnValues.certificationId)}`, \n        txHash: receipt.transactionHash\n      })\n\n    } catch (e) {\n      this.setState({issuing: false})\n      alert(e.message, console.error(e))\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"py-4 text-center\">\n          <h1 className=\"text-white\">Issue Real Marriage certification</h1>\n        </div>\n        <form className=\"form-signin\">\n          <div className=\"text-left mb-4\">\n            <p className=\"lead text-white\">Confirm your and your partner's name.</p>\n          </div>\n          <div className=\"form-label-group mb-2\">\n            { this.state.issued || this.state.issuing\n              ? <input type=\"text\" className=\"form-control\" value={fromHex(this.state.bride)} readOnly/>\n              : <input type=\"text\" name=\"bride\" className=\"form-control\" \n                  value={fromHex(this.state.bride)} onChange={(e) => this.handleChange(e)} />\n            }\n          </div>\n          <div className=\"form-label-group mb-4\">\n            { this.state.issued || this.state.issuing\n              ? <input type=\"text\" className=\"form-control\" value={fromHex(this.state.groom)} readOnly/>\n              : <input type=\"text\" name=\"groom\" className=\"form-control\" \n                  value={fromHex(this.state.groom)} onChange={(e) => this.handleChange(e)} />\n            }\n          </div>\n          <div className=\"text-left mb-4\">\n            <p className=\"lead text-white\">We issue marriage certification on Ethereum and take <u>0.02</u> ETH as issuance fee. Please make sure that <a className=\"text-white\"href=\"https://metamask.io/\"><strong>MetaMask</strong></a> have installed and enough ETH have been deposited.</p>\n            <p className=\"lead text-white\">If you have prepared, we issue marriage certification for you. It may take few minutes. Be patient.</p>\n          </div>\n          { this.state.issuing\n            ? <button className = \"btn btn-lg btn-block btn-outline-pink mb-4\" disabled>\n                <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Issuing...\n              </button>\n            : <button className = \"btn btn-lg btn-block btn-outline-pink mb-4\" onClick = {(e) => this.handleClick(e)}>\n                { this.state.issued  ? 'View Certification' : 'Issue Real Certification'}\n              </button>\n          }\n          \n        </form>\n      </div>\n    )\n  }\n}\n\nconst padTo32byte = (hex) => `0x${hex.padStart(64, '0')}`\n\nexport default IssuePage\n","import React, { Component } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nimport Home from './Home'\nimport Certification from './Certification'\nimport IssuePage from './IssuePage'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/certification/sample/:bride/:groom/\" component={Certification}/>\n          <Route path=\"/certification/:id/:txHash\" component={Certification}/>\n          <Route path=\"/issue/:bride/:groom/\" component={IssuePage}/>\n          <Route path=\"/\" component={Home}/>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}